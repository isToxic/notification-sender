/*
 * This file is generated by jOOQ.
 */
package org.zgr.notification.sender.db.jooq.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.zgr.notification.sender.db.jooq.NotificationSender;
import org.zgr.notification.sender.db.jooq.tables.records.IntCommResponseRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IntCommResponse extends TableImpl<IntCommResponseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>notification_sender.int_comm_response</code>
     */
    public static final IntCommResponse INT_COMM_RESPONSE = new IntCommResponse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IntCommResponseRecord> getRecordType() {
        return IntCommResponseRecord.class;
    }

    /**
     * The column <code>notification_sender.int_comm_response.contact_id</code>.
     */
    public final TableField<IntCommResponseRecord, Long> CONTACT_ID = createField(DSL.name("contact_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>notification_sender.int_comm_response.response_nm</code>.
     */
    public final TableField<IntCommResponseRecord, String> RESPONSE_NM = createField(DSL.name("response_nm"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>notification_sender.int_comm_response.message_type</code>.
     */
    public final TableField<IntCommResponseRecord, String> MESSAGE_TYPE = createField(DSL.name("message_type"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>notification_sender.int_comm_response.part_count</code>.
     */
    public final TableField<IntCommResponseRecord, Integer> PART_COUNT = createField(DSL.name("part_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>notification_sender.int_comm_response.comm_cost</code>.
     */
    public final TableField<IntCommResponseRecord, BigDecimal> COMM_COST = createField(DSL.name("comm_cost"), SQLDataType.NUMERIC(4, 2).nullable(false), this, "");

    /**
     * The column <code>notification_sender.int_comm_response.error_code</code>.
     */
    public final TableField<IntCommResponseRecord, Integer> ERROR_CODE = createField(DSL.name("error_code"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>notification_sender.int_comm_response.error_text</code>.
     */
    public final TableField<IntCommResponseRecord, String> ERROR_TEXT = createField(DSL.name("error_text"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>notification_sender.int_comm_response.response_dttm</code>.
     */
    public final TableField<IntCommResponseRecord, Timestamp> RESPONSE_DTTM = createField(DSL.name("response_dttm"), SQLDataType.TIMESTAMP(6).nullable(false), this, "");

    /**
     * The column <code>notification_sender.int_comm_response.int_update_dttm</code>.
     */
    public final TableField<IntCommResponseRecord, Timestamp> INT_UPDATE_DTTM = createField(DSL.name("int_update_dttm"), SQLDataType.TIMESTAMP(6).nullable(false), this, "");

    /**
     * The column <code>notification_sender.int_comm_response.int_status</code>.
     */
    public final TableField<IntCommResponseRecord, String> INT_STATUS = createField(DSL.name("int_status"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    private IntCommResponse(Name alias, Table<IntCommResponseRecord> aliased) {
        this(alias, aliased, null);
    }

    private IntCommResponse(Name alias, Table<IntCommResponseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>notification_sender.int_comm_response</code> table reference
     */
    public IntCommResponse(String alias) {
        this(DSL.name(alias), INT_COMM_RESPONSE);
    }

    /**
     * Create an aliased <code>notification_sender.int_comm_response</code> table reference
     */
    public IntCommResponse(Name alias) {
        this(alias, INT_COMM_RESPONSE);
    }

    /**
     * Create a <code>notification_sender.int_comm_response</code> table reference
     */
    public IntCommResponse() {
        this(DSL.name("int_comm_response"), null);
    }

    public <O extends Record> IntCommResponse(Table<O> child, ForeignKey<O, IntCommResponseRecord> key) {
        super(child, key, INT_COMM_RESPONSE);
    }

    @Override
    public Schema getSchema() {
        return NotificationSender.NOTIFICATION_SENDER;
    }

    @Override
    public IntCommResponse as(String alias) {
        return new IntCommResponse(DSL.name(alias), this);
    }

    @Override
    public IntCommResponse as(Name alias) {
        return new IntCommResponse(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IntCommResponse rename(String name) {
        return new IntCommResponse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IntCommResponse rename(Name name) {
        return new IntCommResponse(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, Integer, BigDecimal, Integer, String, Timestamp, Timestamp, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
